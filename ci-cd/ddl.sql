DROP TABLE IF EXISTS category CASCADE;
-- Creating the category table
CREATE TABLE category (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,  -- The unique identifier for this record
    name VARCHAR(255),  -- The name associated with this entity
    PRIMARY KEY (id)
);

COMMENT ON COLUMN category.id IS 'The unique identifier for this record';
COMMENT ON COLUMN category.name IS 'The name associated with this entity';
COMMENT ON TABLE category IS 'Table storing category information';

DROP TABLE IF EXISTS pet CASCADE;
-- Creating the pet table
CREATE TABLE pet (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,  -- The unique identifier for this record
    name VARCHAR(255) NOT NULL,  -- The name associated with this entity
    category BIGINT,  -- Establishing a foreign key to category table
    photourls TEXT[],  -- URLs to images or media associated with this entity
    status VARCHAR(255),  -- The current state of the entity (e.g., available, pending, sold)
    PRIMARY KEY (id),
    FOREIGN KEY (category) REFERENCES category(id) ON DELETE SET NULL -- Establishing a foreign key to category table
);

COMMENT ON COLUMN pet.id IS 'The unique identifier for this record';
COMMENT ON COLUMN pet.name IS 'The name associated with this entity';
COMMENT ON COLUMN pet.category IS 'Establishing a foreign key to category table';
COMMENT ON COLUMN pet.photourls IS 'URLs to images or media associated with this entity';
COMMENT ON COLUMN pet.status IS 'The current state of the entity (e.g., available, pending, sold)';
COMMENT ON TABLE pet IS 'Table storing pet information';

DROP TABLE IF EXISTS customer CASCADE;
-- Creating the customer table
CREATE TABLE customer (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,  -- The unique identifier for this record
    username VARCHAR(255),  -- The username associated with this account
    PRIMARY KEY (id)
);

COMMENT ON COLUMN customer.id IS 'The unique identifier for this record';
COMMENT ON COLUMN customer.username IS 'The username associated with this account';
COMMENT ON TABLE customer IS 'Table storing customer information';

DROP TABLE IF EXISTS address CASCADE;
-- Creating the address table
CREATE TABLE address (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,  -- The unique identifier for this record
    customerid BIGINT,  -- The foreign key referencing the id in the customer table
    street VARCHAR(255),  -- The street part of the address
    city VARCHAR(255),  -- The city part of the address
    state VARCHAR(255),  -- The state or region part of the address
    zip VARCHAR(255),  -- The postal code of the address
    PRIMARY KEY (id),
    FOREIGN KEY (customerid) REFERENCES customer(id) ON DELETE SET NULL -- Establishing a foreign key to customer table
);

COMMENT ON COLUMN address.id IS 'The unique identifier for this address record';
COMMENT ON COLUMN address.customerid IS 'The foreign key referencing the id in the customer table';
COMMENT ON COLUMN address.street IS 'The street part of the address';
COMMENT ON COLUMN address.city IS 'The city part of the address';
COMMENT ON COLUMN address.state IS 'The state or region part of the address';
COMMENT ON COLUMN address.zip IS 'The postal code of the address';
COMMENT ON TABLE address IS 'Table storing address information';


DROP TABLE IF EXISTS "order" CASCADE;
-- Creating the order table
CREATE TABLE "order" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,  -- The unique identifier for this record
    customerid BIGINT,  -- The foreign key referencing the id in the customer table
    petid BIGINT,  -- The foreign key referencing the id in the pet table
    quantity INTEGER,  -- The number of items or units involved
    shipdate TIMESTAMP,  -- The scheduled date for shipment
    status VARCHAR(255),  -- The current state of the entity (e.g., available, pending, sold)
    complete BOOLEAN,  -- Indicator if the process is completed (true/false)
    PRIMARY KEY (id),
    FOREIGN KEY (petid) REFERENCES pet(id) ON DELETE SET null,  -- Establishing a foreign key to pet table
    FOREIGN KEY (customerid) REFERENCES customer(id) ON DELETE SET NULL -- Establishing a foreign key to customer table
);

COMMENT ON COLUMN "order".id IS 'The unique identifier for this record';
COMMENT ON COLUMN "order".customerid IS 'The foreign key referencing the id in the customer table';
COMMENT ON COLUMN "order".petid IS 'The foreign key referencing the id in the pet table';
COMMENT ON COLUMN "order".quantity IS 'The number of items or units involved';
COMMENT ON COLUMN "order".shipdate IS 'The scheduled date for shipment';
COMMENT ON COLUMN "order".status IS 'The current state of the entity (e.g., available, pending, sold)';
COMMENT ON COLUMN "order".complete IS 'Indicator if the process is completed (true/false)';
COMMENT ON TABLE "order" IS 'Table storing order information';


DROP TABLE IF EXISTS "user" CASCADE;
-- Creating the user table
CREATE TABLE "user" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,  -- The unique identifier for this record
    customerid BIGINT,  -- The foreign key referencing the id in the customer table
    username VARCHAR(255),  -- The username associated with this account
    firstname VARCHAR(255),  -- The first name of the user
    lastname VARCHAR(255),  -- The last name of the user
    email VARCHAR(255),  -- The email address of the user
    password VARCHAR(255),  -- The password for accessing the account
    phone VARCHAR(255),  -- The contact phone number of the user
    userstatus INTEGER,  -- The current status of the user (e.g., active, inactive)
    PRIMARY KEY (id),
    FOREIGN KEY (customerid) REFERENCES customer(id) ON DELETE SET NULL -- Establishing a foreign key to customer table
);

COMMENT ON COLUMN "user".id IS 'The unique identifier for this record';
COMMENT ON COLUMN "user".customerid IS 'The foreign key referencing the id in the customer table';
COMMENT ON COLUMN "user".username IS 'The username associated with this account';
COMMENT ON COLUMN "user".firstname IS 'The first name of the user';
COMMENT ON COLUMN "user".lastname IS 'The last name of the user';
COMMENT ON COLUMN "user".email IS 'The email address of the user';
COMMENT ON COLUMN "user".password IS 'The password for accessing the account';
COMMENT ON COLUMN "user".phone IS 'The contact phone number of the user';
COMMENT ON COLUMN "user".userstatus IS 'The current status of the user (e.g., active, inactive)';
COMMENT ON TABLE "user" IS 'Table storing user information';

DROP TABLE IF EXISTS tag CASCADE;
-- Creating the tag table
CREATE TABLE tag (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,  -- The unique identifier for this record
    name VARCHAR(255),  -- The name associated with this entity
    PRIMARY KEY (id)
);

COMMENT ON COLUMN tag.id IS 'The unique identifier for this record';
COMMENT ON COLUMN tag.name IS 'The name associated with this entity';
COMMENT ON TABLE tag IS 'Table storing tag information';

DROP TABLE IF EXISTS pettag CASCADE;
-- Creating the pet_tag table
CREATE TABLE pettag (
    petid BIGINT,  -- Foreign key referencing pet table
    tagid BIGINT,  -- Foreign key referencing tag table
    PRIMARY KEY (petid, tagid),
    FOREIGN KEY (petid) REFERENCES pet(id) ON DELETE CASCADE,  -- Ensure consistency with pet table
    FOREIGN KEY (tagid) REFERENCES tag(id) ON DELETE CASCADE   -- Ensure consistency with tag table
);

COMMENT ON COLUMN pettag.petid IS 'Foreign key referencing pet table';
COMMENT ON COLUMN pettag.tagid IS 'Foreign key referencing tag table';
COMMENT ON TABLE pettag IS 'Table storing relationship between pets and tags';