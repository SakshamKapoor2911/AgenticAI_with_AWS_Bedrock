AWSTemplateFormatVersion: '2010-09-09'
Description: Agentic AI with Bedrock Agents workshop

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: AgenticAI
  DBUsername:
    Description: Username for the database
    Type: String
    Default: postgres
  DBPassword:
    Description: Password for the database
    Type: String
    Default: petstoremaster
  MyAssetsBucketName:
    Description: Assets bucket name
    Type: String
    Default: ws-assets-prod-iad-r-pdx-f3b3f9f1a7d6a3d0
  MyAssetsBucketPrefix:
    Description: Assets bucket prefix
    Type: String
    Default: 4b5336de-e5b8-4b90-b1d8-dec31125cd95
  Psycopg2:
    Description: psycopg2 layer
    Type: String
    Default: psycopg2.zip
  SQLLoaderLambdaSrc:
    Description: Lambda package
    Type: String
    Default: lambda_package.zip
  OrchestratorKBActionLambdaSrc:
    Description: Lambda package
    Type: String
    Default: OrchestratorKBActionLambda.zip
  OrchestratorAPIActionLambdaSrc:
    Description: Lambda package
    Type: String
    Default: OrchestratorAPIActionLambda.zip
  OrchestratorDBActionLambdaSrc:
    Description: Lambda package
    Type: String
    Default: OrchestratorDBActionLambda.zip
  RestAPIActionLambdaSrc:
    Description: Lambda package
    Type: String
    Default: RestAPIActionLambda.zip
  DatabaseActionLambdaSrc:
    Description: Lambda package
    Type: String
    Default: DatabaseActionLambda.zip

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-EIP1

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT1

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-EIP2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable1

  PrivateRouteToNAT1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT2

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable2

  PrivateRouteToNAT2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application servers in public subnet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSecurityGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS Aurora
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RDSSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS Aurora
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  PetStoreQAKBBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "petstore-qa-kb-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
  
  PetStoreDBKBBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "petstore-db-kb-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private

  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "16.3"
      DatabaseName: petstore
      Port: 5432
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      ServerlessV2ScalingConfiguration:
        MinCapacity: 1
        MaxCapacity: 4
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  RDSClusterInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: LambdaVPCNetworkAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: CloudFormationSignalPermission
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: "*"
  
  Psycopg2Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${EnvironmentName}-psycopg2-layer"
      Description: Lambda layer for psycopg2, compatible with Python 3.11 x86
      Content:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}/${Psycopg2}"
      CompatibleRuntimes:
        - python3.11
      CompatibleArchitectures:
        - x86_64
      LicenseInfo: "PostgreSQL License"

  DatabaseActionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-database-action"
      Description: "Lambda function to perform database actions on the petstore database"
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}/lambda/${DatabaseActionLambdaSrc}"
      Layers:
        - !Ref Psycopg2Layer
      MemorySize: 512
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSCluster.Endpoint.Address
          DB_PORT: "5432"
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_NAME: "petstore"
          QUERY_CORRECTION_AGENT_ID: 'QUERY_CORRECTION_AGENT_ID'
  
  # OrchestratorKBAction Lambda Function
  OrchestratorKBActionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-orchestrator-kb-action"
      Description: Lambda function to handle knowledge base actions
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}/lambda/OrchestratorKBActionLambda.zip"
      MemorySize: 256
      Timeout: 180
      Environment:
        Variables:
          AGENT_ID: 'KB_AGENTID'
          AGENT_ALIAS_ID: 'TSTALIASID'

  # OrchestratorAPIAction Lambda Function
  OrchestratorAPIActionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-orchestrator-api-action"
      Description: Lambda function to handle API actions
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}/lambda/OrchestratorAPIActionLambda.zip"
      MemorySize: 256
      Timeout: 180
      Environment:
        Variables:
          AGENT_ID: 'REST_API_AGENT_ID'
          AGENT_ALIAS_ID: 'TSTALIASID'

  # OrchestratorDBAction Lambda Function
  OrchestratorDBActionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-orchestrator-db-action"
      Description: Lambda function to handle database actions
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}/lambda/OrchestratorDBActionLambda.zip"
      MemorySize: 256
      Timeout: 180
      Environment:
        Variables:
          AGENT_ID: 'QUERY_GENERATION_AGENT_ID'
          AGENT_ALIAS_ID: 'TSTALIASID'
  
  # RestAPIAction Lambda Function
  RestAPIActionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-rest-api-action"
      Description: Lambda function to handle REST API actions
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}/lambda/RestAPIActionLambda.zip"
      MemorySize: 512
      Timeout: 300

Outputs:
  VPCID:
    Description: The ID of the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${EnvironmentName}-VPCID"

  PublicSubnetIDs:
    Description: The IDs of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub "${EnvironmentName}-PublicSubnetIDs"

  PrivateSubnetIDs:
    Description: The IDs of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub "${EnvironmentName}-PrivateSubnetIDs"

  DBClusterEndpoint:
    Description: The endpoint address of the Aurora PostgreSQL cluster
    Value: !GetAtt RDSCluster.Endpoint.Address
    Export:
      Name: !Sub "${EnvironmentName}-DBClusterEndpoint"

  DBClusterReaderEndpoint:
    Description: The reader endpoint address of the Aurora PostgreSQL cluster
    Value: !GetAtt RDSCluster.ReadEndpoint.Address
    Export:
      Name: !Sub "${EnvironmentName}-DBClusterReaderEndpoint"

  ApplicationSecurityGroupId:
    Description: Application Security Group ID
    Value: !Ref ApplicationSecurityGroup

  DBClusterARN:
    Description: The Amazon Resource Name (ARN) of the Aurora PostgreSQL cluster
    Value: !Ref RDSCluster
    Export:
      Name: !Sub "${EnvironmentName}-DBClusterARN"

  RDSSecurityGroupID:
    Description: The ID of the security group associated with the RDS cluster
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub "${EnvironmentName}-RDSSecurityGroupID"

  PetStoreQAKBBucket:
    Description: S3 bucket for PetStore QA KB
    Value: !Ref PetStoreQAKBBucket
    Export:
      Name: !Sub "${EnvironmentName}-PetStoreQAKBBucket"

  PetStoreDBKBBucket:
    Description: S3 bucket for PetStore DB KB
    Value: !Ref PetStoreDBKBBucket
    Export:
      Name: !Sub "${EnvironmentName}-PetStoreDBKBBucket"

  DatabaseActionLambdaArn:
    Description: ARN of the DatabaseAction Lambda function
    Value: !GetAtt DatabaseActionLambda.Arn
    Export:
      Name: !Sub "${EnvironmentName}-DatabaseActionLambdaArn"

  OrchestratorKBActionLambdaArn:
    Description: ARN of the OrchestratorKBAction Lambda function
    Value: !GetAtt OrchestratorKBActionLambda.Arn
    Export:
      Name: !Sub "${EnvironmentName}-OrchestratorKBActionLambdaArn"

  OrchestratorAPIActionLambdaArn:
    Description: ARN of the OrchestratorAPIAction Lambda function
    Value: !GetAtt OrchestratorAPIActionLambda.Arn
    Export:
      Name: !Sub "${EnvironmentName}-OrchestratorAPIActionLambdaArn"

  OrchestratorDBActionLambdaArn:
    Description: ARN of the OrchestratorDBAction Lambda function
    Value: !GetAtt OrchestratorDBActionLambda.Arn
    Export:
      Name: !Sub "${EnvironmentName}-OrchestratorDBActionLambdaArn"

  RestAPIActionLambdaArn:
    Description: ARN of the RestAPIAction Lambda function
    Value: !GetAtt RestAPIActionLambda.Arn
    Export:
      Name: !Sub "${EnvironmentName}-RestAPIActionLambdaArn"